apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.0'

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 30
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def LIB_GROUP_ID = 'net.ypresto.androidtranscoder'
def LIB_ARTIFACT_ID = 'android-transcoder'
def LIB_VERSION = '0.5.3'

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

publishing {
    repositories {
        maven {
            name = "GithubPackages"
            url = uri("https://maven.pkg.github.com/alex-mazzariol/android-transcoder")
            credentials {
                def localProperties = new Properties()
                localProperties.load(new FileInputStream(rootProject.file("local.properties")))

                username = localProperties['GITHUB_USER']
                password = localProperties['GITHUB_PERSONAL_ACCESS_TOKEN']
            }
        }
    }
    publications {
        androidTranscoder(MavenPublication) {
            groupId LIB_GROUP_ID
            artifactId LIB_ARTIFACT_ID
            version LIB_VERSION
            artifact("$buildDir/outputs/aar/lib-release.aar")
            artifact(sourceJar)

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}